model Recipe {
  id           String    @id @default(cuid())
  title        String
  serving      Float
  tags         String[]
  thumbnailUrl String?
  ingredients  Json
  youtubeUrl   String?
  steps        String[]
  authorID     String
  viewCount    Int       @default(0)
  comments     Comment[]
  likes        Like[]
  author       Author    @relation(fields: [authorID], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Author {
  id         String   @id @default(cuid())
  name       String   @unique
  youtubeUrl String?
  imageUrl   String?
  youtubeId  String?
  Recipe     Recipe[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id            String  @id @default(cuid())
  content       String
  recipeId      String
  userId        String? // Nullable for non-logged-in users
  guestName     String?
  guestPassword String?
  ipAddress     String?

  recipe Recipe @relation(fields: [recipeId], references: [id])
  user   User?  @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id       String @id @default(cuid())
  userId   String
  recipeId String

  recipe Recipe @relation(fields: [recipeId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, recipeId]) // Prevent duplicate likes
}
