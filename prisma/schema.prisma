// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  USER
  TEST
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          UserRole?       @default(USER)
  password      String?
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Comment   Comment[]
  Like      Like[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Recipe {
  id           String    @id @default(cuid())
  title        String
  serving      Float
  tags         String[]
  thumbnailUrl String?
  ingredients  Json
  youtubeUrl   String?
  steps        String[]
  authorID     String
  comments     Comment[]
  likes        Like[]
  author       Author    @relation(fields: [authorID], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Author {
  id         String   @id @default(cuid())
  name       String   @unique
  youtubeUrl String?
  imageUrl   String?
  youtubeId  String?
  Recipe     Recipe[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id            String  @id @default(cuid())
  content       String
  recipeId      String
  userId        String? // Nullable for non-logged-in users
  guestName     String?
  guestPassword String?
  ipAddress     String?

  recipe Recipe @relation(fields: [recipeId], references: [id])
  user   User?  @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id       String @id @default(cuid())
  userId   String
  recipeId String

  recipe Recipe @relation(fields: [recipeId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, recipeId]) // Prevent duplicate likes
}
